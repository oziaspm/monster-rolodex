{"version":3,"sources":["components/card-componet/Card.js","components/card-list-component/CardList.js","components/search-box-component/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonters","searchField","setSearchField","useEffect","a","fetchData","getData","fetch","data","json","filteredMonsters","filter","toLowerCase","includes","event","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAaeA,EAVF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAKL,EAAQM,YCMJC,G,MAVE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACE,qBAAKP,UAAU,YAAf,SAEIO,EAASC,KAAI,SAAAT,GAAO,OAAIA,GAAY,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQI,WCOhDM,G,MAdG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAEhC,OACE,8BACE,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAWF,Q,MCiCJG,MArCf,WACE,MAA+BC,mBAAS,IAAxC,mBAAOR,EAAP,KAAiBS,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,YACK,uCAAG,4BAAAC,EAAA,sEACSC,IADT,OACRd,EADQ,OAEdS,EAAWT,GAFG,2CAAH,qDAKbe,KACC,IAEH,IAAMD,EAAS,uCAAG,4BAAAD,EAAA,sEACGG,MAAM,8CADT,cACVC,EADU,yBAETA,EAAKC,QAFI,2CAAH,qDAKTC,EAAmBnB,EAASoB,QAChC,SAAA5B,GAAO,OAAIA,EAAQK,KAAKwB,cAAcC,SAASZ,EAAYW,kBAM7D,OACE,sBAAK5B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aATe,SAACmB,GACpBZ,EAAeY,EAAMC,OAAOC,UAU1B,cAAC,EAAD,CAAUzB,SAAUmB,QCzBXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84340ea7.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css' ;\n\nconst Card = ({monster}) => {\n  return (\n    <div className='card-container'>\n      <img alt='monster' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\n      <h2>{monster.name}</h2>\n      <p>{ monster.email }</p>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from '../card-componet/Card'\nimport \"./CardList.css\"\n\nconst CardList = ({monsters}) => {\n  return (\n    <div className='card-list'>\n      {\n        monsters.map(monster => monster && (<Card key={monster.id} monster={ monster }/>))\n      }\n    </div>\n  )\n}\n\nexport default CardList\n","import './SearchBox.css'\nconst SearchBox = ({ placeholder, handleChange }) => {\n  \n  return (\n    <div>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={ handleChange }\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { useState, useEffect } from 'react';\nimport CardList from './components/card-list-component/CardList';\nimport SearchBox from './components/search-box-component/SearchBox';\nimport './App.css';\n\nfunction App() {\n  const [monsters, setMonters] = useState([])\n  const [searchField, setSearchField] = useState('');\n  \n  useEffect(() => {\n    const getData = async () => {\n      const monsters = await fetchData()\n      setMonters(monsters)\n       \n    }\n    getData()\n  }, [])\n\n  const fetchData = async () => {\n    const data = await fetch('https://jsonplaceholder.typicode.com/users')\n    return data.json()\n  }\n  \n  const filteredMonsters = monsters.filter(\n    monster => monster.name.toLowerCase().includes(searchField.toLowerCase()\n  ))\n  const handleChange = (event) => {\n    setSearchField(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1> Monster Rolodex </h1>\n      <SearchBox\n        placeholder='search monsters'\n        handleChange={handleChange}\n      />\n      <CardList monsters={filteredMonsters}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}